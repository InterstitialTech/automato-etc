-- generated by elm_rs


module Messages exposing (..)

import Dict exposing (Dict)
import File
import Http
import Json.Decode
import Json.Encode
import Payload exposing (PayloadEnum, payloadEnumDecoder, payloadEnumEncoder)
import SerialError exposing (Error, errorDecoder, errorEncoder)
import Url.Builder


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]

        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


type alias AutomatoMsg =
    { id : Int
    , message : PayloadEnum
    }


automatoMsgEncoder : AutomatoMsg -> Json.Encode.Value
automatoMsgEncoder struct =
    Json.Encode.object
        [ ( "id", Json.Encode.int struct.id )
        , ( "message", payloadEnumEncoder struct.message )
        ]


automatoMsgDecoder : Json.Decode.Decoder AutomatoMsg
automatoMsgDecoder =
    Json.Decode.succeed AutomatoMsg
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "id" Json.Decode.int))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "message" payloadEnumDecoder))


type alias WhatMsg =
    { what : String
    , msg : AutomatoMsg
    }


whatMsgEncoder : WhatMsg -> Json.Encode.Value
whatMsgEncoder struct =
    Json.Encode.object
        [ ( "what", Json.Encode.string struct.what )
        , ( "msg", automatoMsgEncoder struct.msg )
        ]


whatMsgDecoder : Json.Decode.Decoder WhatMsg
whatMsgDecoder =
    Json.Decode.succeed WhatMsg
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "what" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "msg" automatoMsgDecoder))


type alias WhatError =
    { what : String
    , msg : Error
    }


whatErrorEncoder : WhatError -> Json.Encode.Value
whatErrorEncoder struct =
    Json.Encode.object
        [ ( "what", Json.Encode.string struct.what )
        , ( "msg", errorEncoder struct.msg )
        ]


whatErrorDecoder : Json.Decode.Decoder WhatError
whatErrorDecoder =
    Json.Decode.succeed WhatError
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "what" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "msg" errorDecoder))
