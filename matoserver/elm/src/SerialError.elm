
-- generated by elm_rs


module SerialError exposing (..)

import Dict exposing (Dict)
import File
import Http
import Json.Decode
import Json.Encode
import Url.Builder


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]
        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


type alias Error =
    { kind : ErrorKind
    , description : String
    }


errorEncoder : Error -> Json.Encode.Value
errorEncoder struct =
    Json.Encode.object
        [ ( "kind", (errorKindEncoder) struct.kind )
        , ( "description", (Json.Encode.string) struct.description )
        ]


errorDecoder : Json.Decode.Decoder Error
errorDecoder =
    Json.Decode.succeed Error
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "kind" (errorKindDecoder)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "description" (Json.Decode.string)))


type ErrorKind
    = NoDevice
    | InvalidInput
    | Unknown
    | Io (Result String IoErrorKind)


errorKindEncoder : ErrorKind -> Json.Encode.Value
errorKindEncoder enum =
    case enum of
        NoDevice ->
            Json.Encode.string "NoDevice"
        InvalidInput ->
            Json.Encode.string "InvalidInput"
        Unknown ->
            Json.Encode.string "Unknown"
        Io inner ->
            Json.Encode.object [ ( "Io", resultEncoder (Json.Encode.string) (ioErrorKindEncoder) inner ) ]

errorKindDecoder : Json.Decode.Decoder ErrorKind
errorKindDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "NoDevice" ->
                            Json.Decode.succeed NoDevice
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "InvalidInput" ->
                            Json.Decode.succeed InvalidInput
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Unknown" ->
                            Json.Decode.succeed Unknown
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map Io (Json.Decode.field "Io" (resultDecoder (Json.Decode.string) (ioErrorKindDecoder)))
        ]

type IoErrorKind
    = NotFound
    | PermissionDenied
    | ConnectionRefused
    | ConnectionReset
    | HostUnreachable
    | NetworkUnreachable
    | ConnectionAborted
    | NotConnected
    | AddrInUse
    | AddrNotAvailable
    | NetworkDown
    | BrokenPipe
    | AlreadyExists
    | WouldBlock
    | NotADirectory
    | IsADirectory
    | DirectoryNotEmpty
    | ReadOnlyFilesystem
    | FilesystemLoop
    | StaleNetworkFileHandle
    | InvalidInputX
    | InvalidData
    | TimedOut
    | WriteZero
    | StorageFull
    | NotSeekable
    | FilesystemQuotaExceeded
    | FileTooLarge
    | ResourceBusy
    | ExecutableFileBusy
    | Deadlock
    | CrossesDevices
    | TooManyLinks
    | InvalidFilename
    | ArgumentListTooLong
    | Interrupted
    | Unsupported
    | UnexpectedEof
    | OutOfMemory
    | Other
    | Uncategorized


ioErrorKindEncoder : IoErrorKind -> Json.Encode.Value
ioErrorKindEncoder enum =
    case enum of
        NotFound ->
            Json.Encode.string "NotFound"
        PermissionDenied ->
            Json.Encode.string "PermissionDenied"
        ConnectionRefused ->
            Json.Encode.string "ConnectionRefused"
        ConnectionReset ->
            Json.Encode.string "ConnectionReset"
        HostUnreachable ->
            Json.Encode.string "HostUnreachable"
        NetworkUnreachable ->
            Json.Encode.string "NetworkUnreachable"
        ConnectionAborted ->
            Json.Encode.string "ConnectionAborted"
        NotConnected ->
            Json.Encode.string "NotConnected"
        AddrInUse ->
            Json.Encode.string "AddrInUse"
        AddrNotAvailable ->
            Json.Encode.string "AddrNotAvailable"
        NetworkDown ->
            Json.Encode.string "NetworkDown"
        BrokenPipe ->
            Json.Encode.string "BrokenPipe"
        AlreadyExists ->
            Json.Encode.string "AlreadyExists"
        WouldBlock ->
            Json.Encode.string "WouldBlock"
        NotADirectory ->
            Json.Encode.string "NotADirectory"
        IsADirectory ->
            Json.Encode.string "IsADirectory"
        DirectoryNotEmpty ->
            Json.Encode.string "DirectoryNotEmpty"
        ReadOnlyFilesystem ->
            Json.Encode.string "ReadOnlyFilesystem"
        FilesystemLoop ->
            Json.Encode.string "FilesystemLoop"
        StaleNetworkFileHandle ->
            Json.Encode.string "StaleNetworkFileHandle"
        InvalidInputX ->
            Json.Encode.string "InvalidInputX"
        InvalidData ->
            Json.Encode.string "InvalidData"
        TimedOut ->
            Json.Encode.string "TimedOut"
        WriteZero ->
            Json.Encode.string "WriteZero"
        StorageFull ->
            Json.Encode.string "StorageFull"
        NotSeekable ->
            Json.Encode.string "NotSeekable"
        FilesystemQuotaExceeded ->
            Json.Encode.string "FilesystemQuotaExceeded"
        FileTooLarge ->
            Json.Encode.string "FileTooLarge"
        ResourceBusy ->
            Json.Encode.string "ResourceBusy"
        ExecutableFileBusy ->
            Json.Encode.string "ExecutableFileBusy"
        Deadlock ->
            Json.Encode.string "Deadlock"
        CrossesDevices ->
            Json.Encode.string "CrossesDevices"
        TooManyLinks ->
            Json.Encode.string "TooManyLinks"
        InvalidFilename ->
            Json.Encode.string "InvalidFilename"
        ArgumentListTooLong ->
            Json.Encode.string "ArgumentListTooLong"
        Interrupted ->
            Json.Encode.string "Interrupted"
        Unsupported ->
            Json.Encode.string "Unsupported"
        UnexpectedEof ->
            Json.Encode.string "UnexpectedEof"
        OutOfMemory ->
            Json.Encode.string "OutOfMemory"
        Other ->
            Json.Encode.string "Other"
        Uncategorized ->
            Json.Encode.string "Uncategorized"

ioErrorKindDecoder : Json.Decode.Decoder IoErrorKind
ioErrorKindDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "NotFound" ->
                            Json.Decode.succeed NotFound
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "PermissionDenied" ->
                            Json.Decode.succeed PermissionDenied
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ConnectionRefused" ->
                            Json.Decode.succeed ConnectionRefused
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ConnectionReset" ->
                            Json.Decode.succeed ConnectionReset
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "HostUnreachable" ->
                            Json.Decode.succeed HostUnreachable
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "NetworkUnreachable" ->
                            Json.Decode.succeed NetworkUnreachable
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ConnectionAborted" ->
                            Json.Decode.succeed ConnectionAborted
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "NotConnected" ->
                            Json.Decode.succeed NotConnected
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "AddrInUse" ->
                            Json.Decode.succeed AddrInUse
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "AddrNotAvailable" ->
                            Json.Decode.succeed AddrNotAvailable
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "NetworkDown" ->
                            Json.Decode.succeed NetworkDown
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "BrokenPipe" ->
                            Json.Decode.succeed BrokenPipe
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "AlreadyExists" ->
                            Json.Decode.succeed AlreadyExists
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "WouldBlock" ->
                            Json.Decode.succeed WouldBlock
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "NotADirectory" ->
                            Json.Decode.succeed NotADirectory
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "IsADirectory" ->
                            Json.Decode.succeed IsADirectory
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "DirectoryNotEmpty" ->
                            Json.Decode.succeed DirectoryNotEmpty
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ReadOnlyFilesystem" ->
                            Json.Decode.succeed ReadOnlyFilesystem
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "FilesystemLoop" ->
                            Json.Decode.succeed FilesystemLoop
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "StaleNetworkFileHandle" ->
                            Json.Decode.succeed StaleNetworkFileHandle
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "InvalidInputX" ->
                            Json.Decode.succeed InvalidInputX
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "InvalidData" ->
                            Json.Decode.succeed InvalidData
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "TimedOut" ->
                            Json.Decode.succeed TimedOut
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "WriteZero" ->
                            Json.Decode.succeed WriteZero
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "StorageFull" ->
                            Json.Decode.succeed StorageFull
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "NotSeekable" ->
                            Json.Decode.succeed NotSeekable
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "FilesystemQuotaExceeded" ->
                            Json.Decode.succeed FilesystemQuotaExceeded
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "FileTooLarge" ->
                            Json.Decode.succeed FileTooLarge
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ResourceBusy" ->
                            Json.Decode.succeed ResourceBusy
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ExecutableFileBusy" ->
                            Json.Decode.succeed ExecutableFileBusy
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Deadlock" ->
                            Json.Decode.succeed Deadlock
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "CrossesDevices" ->
                            Json.Decode.succeed CrossesDevices
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "TooManyLinks" ->
                            Json.Decode.succeed TooManyLinks
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "InvalidFilename" ->
                            Json.Decode.succeed InvalidFilename
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ArgumentListTooLong" ->
                            Json.Decode.succeed ArgumentListTooLong
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Interrupted" ->
                            Json.Decode.succeed Interrupted
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Unsupported" ->
                            Json.Decode.succeed Unsupported
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UnexpectedEof" ->
                            Json.Decode.succeed UnexpectedEof
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "OutOfMemory" ->
                            Json.Decode.succeed OutOfMemory
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Other" ->
                            Json.Decode.succeed Other
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Uncategorized" ->
                            Json.Decode.succeed Uncategorized
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        ]

