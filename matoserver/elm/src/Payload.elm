
-- generated by elm_rs


module Payload exposing (..)

import Dict exposing (Dict)
import File
import Http
import Json.Decode
import Json.Encode
import Url.Builder


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]
        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


type alias RemoteInfo =
    { protoversion : Float
    , macAddress : Int
    , datalen : Int
    , fieldcount : Int
    }


remoteInfoEncoder : RemoteInfo -> Json.Encode.Value
remoteInfoEncoder struct =
    Json.Encode.object
        [ ( "protoversion", (Json.Encode.float) struct.protoversion )
        , ( "mac_address", (Json.Encode.int) struct.macAddress )
        , ( "datalen", (Json.Encode.int) struct.datalen )
        , ( "fieldcount", (Json.Encode.int) struct.fieldcount )
        ]


remoteInfoDecoder : Json.Decode.Decoder RemoteInfo
remoteInfoDecoder =
    Json.Decode.succeed RemoteInfo
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "protoversion" (Json.Decode.float)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "mac_address" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "datalen" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "fieldcount" (Json.Decode.int)))


type alias Pinval =
    { pin : Int
    , state : Int
    }


pinvalEncoder : Pinval -> Json.Encode.Value
pinvalEncoder struct =
    Json.Encode.object
        [ ( "pin", (Json.Encode.int) struct.pin )
        , ( "state", (Json.Encode.int) struct.state )
        ]


pinvalDecoder : Json.Decode.Decoder Pinval
pinvalDecoder =
    Json.Decode.succeed Pinval
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "pin" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "state" (Json.Decode.int)))


type alias AnalogPinval =
    { pin : Int
    , state : Int
    }


analogPinvalEncoder : AnalogPinval -> Json.Encode.Value
analogPinvalEncoder struct =
    Json.Encode.object
        [ ( "pin", (Json.Encode.int) struct.pin )
        , ( "state", (Json.Encode.int) struct.state )
        ]


analogPinvalDecoder : Json.Decode.Decoder AnalogPinval
analogPinvalDecoder =
    Json.Decode.succeed AnalogPinval
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "pin" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "state" (Json.Decode.int)))


type alias Pinmode =
    { pin : Int
    , mode : Int
    }


pinmodeEncoder : Pinmode -> Json.Encode.Value
pinmodeEncoder struct =
    Json.Encode.object
        [ ( "pin", (Json.Encode.int) struct.pin )
        , ( "mode", (Json.Encode.int) struct.mode )
        ]


pinmodeDecoder : Json.Decode.Decoder Pinmode
pinmodeDecoder =
    Json.Decode.succeed Pinmode
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "pin" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "mode" (Json.Decode.int)))


type alias Readmem =
    { address : Int
    , length : Int
    }


readmemEncoder : Readmem -> Json.Encode.Value
readmemEncoder struct =
    Json.Encode.object
        [ ( "address", (Json.Encode.int) struct.address )
        , ( "length", (Json.Encode.int) struct.length )
        ]


readmemDecoder : Json.Decode.Decoder Readmem
readmemDecoder =
    Json.Decode.succeed Readmem
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "address" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "length" (Json.Decode.int)))


type alias ReadmemReply =
    { length : Int
    , data : List (Int)
    }


readmemReplyEncoder : ReadmemReply -> Json.Encode.Value
readmemReplyEncoder struct =
    Json.Encode.object
        [ ( "length", (Json.Encode.int) struct.length )
        , ( "data", (Json.Encode.list (Json.Encode.int)) struct.data )
        ]


readmemReplyDecoder : Json.Decode.Decoder ReadmemReply
readmemReplyDecoder =
    Json.Decode.succeed ReadmemReply
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "length" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "data" (Json.Decode.list (Json.Decode.int))))


type alias WriteMemSerde =
    { address : Int
    , data : List (Int)
    }


writeMemSerdeEncoder : WriteMemSerde -> Json.Encode.Value
writeMemSerdeEncoder struct =
    Json.Encode.object
        [ ( "address", (Json.Encode.int) struct.address )
        , ( "data", (Json.Encode.list (Json.Encode.int)) struct.data )
        ]


writeMemSerdeDecoder : Json.Decode.Decoder WriteMemSerde
writeMemSerdeDecoder =
    Json.Decode.succeed WriteMemSerde
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "address" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "data" (Json.Decode.list (Json.Decode.int))))


type alias ReadField =
    { index : Int
    }


readFieldEncoder : ReadField -> Json.Encode.Value
readFieldEncoder struct =
    Json.Encode.object
        [ ( "index", (Json.Encode.int) struct.index )
        ]


readFieldDecoder : Json.Decode.Decoder ReadField
readFieldDecoder =
    Json.Decode.succeed ReadField
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "index" (Json.Decode.int)))


type alias ReadFieldReply =
    { index : Int
    , offset : Int
    , length : Int
    , format : Int
    , name : List (Int)
    }


readFieldReplyEncoder : ReadFieldReply -> Json.Encode.Value
readFieldReplyEncoder struct =
    Json.Encode.object
        [ ( "index", (Json.Encode.int) struct.index )
        , ( "offset", (Json.Encode.int) struct.offset )
        , ( "length", (Json.Encode.int) struct.length )
        , ( "format", (Json.Encode.int) struct.format )
        , ( "name", (Json.Encode.list (Json.Encode.int)) struct.name )
        ]


readFieldReplyDecoder : Json.Decode.Decoder ReadFieldReply
readFieldReplyDecoder =
    Json.Decode.succeed ReadFieldReply
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "index" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "offset" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "length" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "format" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "name" (Json.Decode.list (Json.Decode.int))))


type PayloadEnum
    = PeAck
    | PeFail (Int)
    | PePinmode (Pinmode)
    | PeReadpin (Int)
    | PeReadpinreply (Pinval)
    | PeWritepin (Pinval)
    | PeReadmem (Readmem)
    | PeReadmemreply (ReadmemReply)
    | PeWritemem (WriteMemSerde)
    | PeReadinfo
    | PeReadinforeply (RemoteInfo)
    | PeReadhumidity
    | PeReadhumidityreply (Float)
    | PeReadtemperature
    | PeReadtemperaturereply (Float)
    | PeReadanalog (Int)
    | PeReadanalogreply (AnalogPinval)
    | PeReadfield (ReadField)
    | PeReadfieldreply (ReadFieldReply)


payloadEnumEncoder : PayloadEnum -> Json.Encode.Value
payloadEnumEncoder enum =
    case enum of
        PeAck ->
            Json.Encode.string "PeAck"
        PeFail inner ->
            Json.Encode.object [ ( "PeFail", Json.Encode.int inner ) ]
        PePinmode inner ->
            Json.Encode.object [ ( "PePinmode", pinmodeEncoder inner ) ]
        PeReadpin inner ->
            Json.Encode.object [ ( "PeReadpin", Json.Encode.int inner ) ]
        PeReadpinreply inner ->
            Json.Encode.object [ ( "PeReadpinreply", pinvalEncoder inner ) ]
        PeWritepin inner ->
            Json.Encode.object [ ( "PeWritepin", pinvalEncoder inner ) ]
        PeReadmem inner ->
            Json.Encode.object [ ( "PeReadmem", readmemEncoder inner ) ]
        PeReadmemreply inner ->
            Json.Encode.object [ ( "PeReadmemreply", readmemReplyEncoder inner ) ]
        PeWritemem inner ->
            Json.Encode.object [ ( "PeWritemem", writeMemSerdeEncoder inner ) ]
        PeReadinfo ->
            Json.Encode.string "PeReadinfo"
        PeReadinforeply inner ->
            Json.Encode.object [ ( "PeReadinforeply", remoteInfoEncoder inner ) ]
        PeReadhumidity ->
            Json.Encode.string "PeReadhumidity"
        PeReadhumidityreply inner ->
            Json.Encode.object [ ( "PeReadhumidityreply", Json.Encode.float inner ) ]
        PeReadtemperature ->
            Json.Encode.string "PeReadtemperature"
        PeReadtemperaturereply inner ->
            Json.Encode.object [ ( "PeReadtemperaturereply", Json.Encode.float inner ) ]
        PeReadanalog inner ->
            Json.Encode.object [ ( "PeReadanalog", Json.Encode.int inner ) ]
        PeReadanalogreply inner ->
            Json.Encode.object [ ( "PeReadanalogreply", analogPinvalEncoder inner ) ]
        PeReadfield inner ->
            Json.Encode.object [ ( "PeReadfield", readFieldEncoder inner ) ]
        PeReadfieldreply inner ->
            Json.Encode.object [ ( "PeReadfieldreply", readFieldReplyEncoder inner ) ]

payloadEnumDecoder : Json.Decode.Decoder PayloadEnum
payloadEnumDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "PeAck" ->
                            Json.Decode.succeed PeAck
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map PeFail (Json.Decode.field "PeFail" (Json.Decode.int))
        , Json.Decode.map PePinmode (Json.Decode.field "PePinmode" (pinmodeDecoder))
        , Json.Decode.map PeReadpin (Json.Decode.field "PeReadpin" (Json.Decode.int))
        , Json.Decode.map PeReadpinreply (Json.Decode.field "PeReadpinreply" (pinvalDecoder))
        , Json.Decode.map PeWritepin (Json.Decode.field "PeWritepin" (pinvalDecoder))
        , Json.Decode.map PeReadmem (Json.Decode.field "PeReadmem" (readmemDecoder))
        , Json.Decode.map PeReadmemreply (Json.Decode.field "PeReadmemreply" (readmemReplyDecoder))
        , Json.Decode.map PeWritemem (Json.Decode.field "PeWritemem" (writeMemSerdeDecoder))
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "PeReadinfo" ->
                            Json.Decode.succeed PeReadinfo
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map PeReadinforeply (Json.Decode.field "PeReadinforeply" (remoteInfoDecoder))
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "PeReadhumidity" ->
                            Json.Decode.succeed PeReadhumidity
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map PeReadhumidityreply (Json.Decode.field "PeReadhumidityreply" (Json.Decode.float))
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "PeReadtemperature" ->
                            Json.Decode.succeed PeReadtemperature
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map PeReadtemperaturereply (Json.Decode.field "PeReadtemperaturereply" (Json.Decode.float))
        , Json.Decode.map PeReadanalog (Json.Decode.field "PeReadanalog" (Json.Decode.int))
        , Json.Decode.map PeReadanalogreply (Json.Decode.field "PeReadanalogreply" (analogPinvalDecoder))
        , Json.Decode.map PeReadfield (Json.Decode.field "PeReadfield" (readFieldDecoder))
        , Json.Decode.map PeReadfieldreply (Json.Decode.field "PeReadfieldreply" (readFieldReplyDecoder))
        ]

type alias AutomatoMsg =
    { id : Int
    , message : PayloadEnum
    }


automatoMsgEncoder : AutomatoMsg -> Json.Encode.Value
automatoMsgEncoder struct =
    Json.Encode.object
        [ ( "id", (Json.Encode.int) struct.id )
        , ( "message", (payloadEnumEncoder) struct.message )
        ]


automatoMsgDecoder : Json.Decode.Decoder AutomatoMsg
automatoMsgDecoder =
    Json.Decode.succeed AutomatoMsg
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "id" (Json.Decode.int)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "message" (payloadEnumDecoder)))


